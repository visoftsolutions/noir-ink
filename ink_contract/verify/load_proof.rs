use ethnum::U256;

use crate::{ink_contract::BaseUltraVerifier, memory::constant::Q};

pub fn load_proof(ctx: &mut BaseUltraVerifier, _proof: &Vec<u8>) {
    let (chunk, _) = _proof.as_chunks::<32>();
    ctx.proof_data.w1_y = (U256::from_le_bytes(chunk[0]) % Q).to_le_bytes();
    ctx.proof_data.w1_x = (U256::from_le_bytes(chunk[1]) % Q).to_le_bytes();
    ctx.proof_data.w2_y = (U256::from_le_bytes(chunk[2]) % Q).to_le_bytes();
    ctx.proof_data.w2_x = (U256::from_le_bytes(chunk[3]) % Q).to_le_bytes();
    ctx.proof_data.w3_y = (U256::from_le_bytes(chunk[4]) % Q).to_le_bytes();
    ctx.proof_data.w3_x = (U256::from_le_bytes(chunk[5]) % Q).to_le_bytes();
    ctx.proof_data.w4_y = (U256::from_le_bytes(chunk[6]) % Q).to_le_bytes();
    ctx.proof_data.w4_x = (U256::from_le_bytes(chunk[7]) % Q).to_le_bytes();
    ctx.proof_data.s_y = (U256::from_le_bytes(chunk[8]) % Q).to_le_bytes();
    ctx.proof_data.s_x = (U256::from_le_bytes(chunk[9]) % Q).to_le_bytes();
    ctx.proof_data.z_y = (U256::from_le_bytes(chunk[10]) % Q).to_le_bytes();
    ctx.proof_data.z_x = (U256::from_le_bytes(chunk[11]) % Q).to_le_bytes();
    ctx.proof_data.z_lookup_y = (U256::from_le_bytes(chunk[12]) % Q).to_le_bytes();
    ctx.proof_data.z_lookup_x = (U256::from_le_bytes(chunk[13]) % Q).to_le_bytes();
    ctx.proof_data.t1_y = (U256::from_le_bytes(chunk[14]) % Q).to_le_bytes();
    ctx.proof_data.t1_x = (U256::from_le_bytes(chunk[15]) % Q).to_le_bytes();
    ctx.proof_data.t2_y = (U256::from_le_bytes(chunk[16]) % Q).to_le_bytes();
    ctx.proof_data.t2_x = (U256::from_le_bytes(chunk[17]) % Q).to_le_bytes();
    ctx.proof_data.t3_y = (U256::from_le_bytes(chunk[18]) % Q).to_le_bytes();
    ctx.proof_data.t3_x = (U256::from_le_bytes(chunk[19]) % Q).to_le_bytes();
    ctx.proof_data.t4_y = (U256::from_le_bytes(chunk[20]) % Q).to_le_bytes();
    ctx.proof_data.t4_x = (U256::from_le_bytes(chunk[21]) % Q).to_le_bytes();
    ctx.proof_data.w1_eval = (U256::from_le_bytes(chunk[22]) % Q).to_le_bytes();
    ctx.proof_data.w2_eval = (U256::from_le_bytes(chunk[23]) % Q).to_le_bytes();
    ctx.proof_data.w3_eval = (U256::from_le_bytes(chunk[24]) % Q).to_le_bytes();
    ctx.proof_data.w4_eval = (U256::from_le_bytes(chunk[25]) % Q).to_le_bytes();
    ctx.proof_data.s_eval = (U256::from_le_bytes(chunk[26]) % Q).to_le_bytes();
    ctx.proof_data.z_eval = (U256::from_le_bytes(chunk[27]) % Q).to_le_bytes();
    ctx.proof_data.z_lookup_eval = (U256::from_le_bytes(chunk[28]) % Q).to_le_bytes();
    ctx.proof_data.q1_eval = (U256::from_le_bytes(chunk[29]) % Q).to_le_bytes();
    ctx.proof_data.q2_eval = (U256::from_le_bytes(chunk[30]) % Q).to_le_bytes();
    ctx.proof_data.q3_eval = (U256::from_le_bytes(chunk[31]) % Q).to_le_bytes();
    ctx.proof_data.q4_eval = (U256::from_le_bytes(chunk[32]) % Q).to_le_bytes();
    ctx.proof_data.qm_eval = (U256::from_le_bytes(chunk[33]) % Q).to_le_bytes();
    ctx.proof_data.qc_eval = (U256::from_le_bytes(chunk[34]) % Q).to_le_bytes();
    ctx.proof_data.qarith_eval = (U256::from_le_bytes(chunk[35]) % Q).to_le_bytes();
    ctx.proof_data.qsort_eval = (U256::from_le_bytes(chunk[36]) % Q).to_le_bytes();
    ctx.proof_data.qelliptic_eval = (U256::from_le_bytes(chunk[37]) % Q).to_le_bytes();
    ctx.proof_data.qaux_eval = (U256::from_le_bytes(chunk[38]) % Q).to_le_bytes();
    ctx.proof_data.sigma1_eval = (U256::from_le_bytes(chunk[39]) % Q).to_le_bytes();
    ctx.proof_data.sigma2_eval = (U256::from_le_bytes(chunk[40]) % Q).to_le_bytes();
    ctx.proof_data.sigma3_eval = (U256::from_le_bytes(chunk[41]) % Q).to_le_bytes();
    ctx.proof_data.sigma4_eval = (U256::from_le_bytes(chunk[42]) % Q).to_le_bytes();
    ctx.proof_data.table1_eval = (U256::from_le_bytes(chunk[43]) % Q).to_le_bytes();
    ctx.proof_data.table2_eval = (U256::from_le_bytes(chunk[44]) % Q).to_le_bytes();
    ctx.proof_data.table3_eval = (U256::from_le_bytes(chunk[45]) % Q).to_le_bytes();
    ctx.proof_data.table4_eval = (U256::from_le_bytes(chunk[46]) % Q).to_le_bytes();
    ctx.proof_data.table_type_eval = (U256::from_le_bytes(chunk[47]) % Q).to_le_bytes();
    ctx.proof_data.id1_eval = (U256::from_le_bytes(chunk[48]) % Q).to_le_bytes();
    ctx.proof_data.id2_eval = (U256::from_le_bytes(chunk[49]) % Q).to_le_bytes();
    ctx.proof_data.id3_eval = (U256::from_le_bytes(chunk[50]) % Q).to_le_bytes();
    ctx.proof_data.id4_eval = (U256::from_le_bytes(chunk[51]) % Q).to_le_bytes();
    ctx.proof_data.w1_omega_eval = (U256::from_le_bytes(chunk[52]) % Q).to_le_bytes();
    ctx.proof_data.w2_omega_eval = (U256::from_le_bytes(chunk[53]) % Q).to_le_bytes();
    ctx.proof_data.w3_omega_eval = (U256::from_le_bytes(chunk[54]) % Q).to_le_bytes();
    ctx.proof_data.w4_omega_eval = (U256::from_le_bytes(chunk[55]) % Q).to_le_bytes();
    ctx.proof_data.s_omega_eval = (U256::from_le_bytes(chunk[56]) % Q).to_le_bytes();
    ctx.proof_data.z_omega_eval = (U256::from_le_bytes(chunk[57]) % Q).to_le_bytes();
    ctx.proof_data.z_lookup_omega_eval = (U256::from_le_bytes(chunk[58]) % Q).to_le_bytes();
    ctx.proof_data.table1_omega_eval = (U256::from_le_bytes(chunk[59]) % Q).to_le_bytes();
    ctx.proof_data.table2_omega_eval = (U256::from_le_bytes(chunk[60]) % Q).to_le_bytes();
    ctx.proof_data.table3_omega_eval = (U256::from_le_bytes(chunk[61]) % Q).to_le_bytes();
    ctx.proof_data.table4_omega_eval = (U256::from_le_bytes(chunk[62]) % Q).to_le_bytes();
    ctx.proof_data.pi_z_y = (U256::from_le_bytes(chunk[63]) % Q).to_le_bytes();
    ctx.proof_data.pi_z_x = (U256::from_le_bytes(chunk[64]) % Q).to_le_bytes();
    ctx.proof_data.pi_z_omega_y = (U256::from_le_bytes(chunk[65]) % Q).to_le_bytes();
    ctx.proof_data.pi_z_omega_x = (U256::from_le_bytes(chunk[66]) % Q).to_le_bytes();
}